import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from imblearn.over_sampling import RandomOverSampler
import joblib

# 1Ô∏è‚É£ Carregar os dados
df = pd.read_csv("data/raw/Customer_support_data.csv")

# 2Ô∏è‚É£ Padronizar os nomes das colunas
df.columns = df.columns.str.lower().str.strip().str.replace(" ", "_")

# 3Ô∏è‚É£ Remover colunas irrelevantes
df = df.drop(columns=["unique_id", "order_id", "order_date_time", "issue_reported_at", "survey_response_date"], errors='ignore')

# 4Ô∏è‚É£ Tratar valores ausentes
df = df.dropna()

# 5Ô∏è‚É£ Identificar todas as colunas categ√≥ricas
categorical_columns = df.select_dtypes(include=["object"]).columns.tolist()

# Criar dicion√°rio para armazenar os encoders
encoders = {}

# Converter todas as colunas categ√≥ricas usando LabelEncoder
for col in categorical_columns:
    encoders[col] = LabelEncoder()
    df[col] = encoders[col].fit_transform(df[col])

# 6Ô∏è‚É£ Definir as vari√°veis independentes (X) e a vari√°vel alvo (y)
X = df.drop(columns=["csat_score"])
y = df["csat_score"]

# üîç Verificar distribui√ß√£o de classes antes do balanceamento
print("Distribui√ß√£o das classes em y antes do balanceamento:")
print(y.value_counts())

# 7Ô∏è‚É£ Balancear as classes com RandomOverSampler
ros = RandomOverSampler(random_state=42)
X_resampled, y_resampled = ros.fit_resample(X, y)

# üîç Verificar a nova distribui√ß√£o de classes
print("Distribui√ß√£o das classes ap√≥s o balanceamento:")
print(pd.Series(y_resampled).value_counts())

# 8Ô∏è‚É£ Dividir os dados em treino e teste
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# 9Ô∏è‚É£ Criar e treinar um modelo de Random Forest
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# üîü Fazer previs√µes no conjunto de teste
y_pred = model.predict(X_test)

# üìä Avaliar o desempenho do modelo
accuracy = accuracy_score(y_test, y_pred)
print(f"Acur√°cia do modelo ap√≥s melhorias: {accuracy:.2f}")
print("Relat√≥rio de Classifica√ß√£o:\n", classification_report(y_test, y_pred, zero_division=1))

# üíæ Salvar o modelo treinado
joblib.dump(model, "models/random_forest_model.pkl")
print("Modelo salvo em: models/random_forest_model.pkl")
